<!-- <h1> SECONDS </h1> -->
<!--///// video grid //////-->

<div>
    <label for="title">Title:</label>
    <input type="text" id="title">

    <button id="start-recording">Start Recording</button>
    <button id="stop-recording" disabled>Stop Recording</button>
</div>
<div id="videos-container"></div>


<script id="videos-template" type="text/handlebars-template">
  <div class="videos">
  {{ video }}
  {{ title }}
  </div>
</script>
<script>
  // navigator.getUserMedia  = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
var mediaConstraints = { audio: !!navigator.mozGetUserMedia, video: true };


document.querySelector('#start-recording').onclick = function() {
    this.disabled = true;
    navigator.getUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
};

document.querySelector('#stop-recording').onclick = function() {
    this.disabled = true;
    mediaRecorder.stop();
};

var mediaRecorder;

function onMediaSuccess(stream) {
  console.log('media success');
    var video = document.createElement('video');

    // var videoWidth = document.getElementById('video-width').value || 320;
    // var videoHeight = document.getElementById('video-height').value || 240;
    var videoWidth = 200;
    var videoHeight = 140;

    video = mergeProps(video, {
        controls: false,
        width: videoWidth,
        height: videoHeight,
        src: URL.createObjectURL(stream)
    });
    video.play();

    videosContainer.appendChild(video);

    mediaRecorder = new MediaStreamRecorder(stream);
    mediaRecorder.mimeType = 'video/webm'; // this line is mandatory
    mediaRecorder.videoWidth  = videoWidth;
    mediaRecorder.videoHeight = videoHeight;

    var title = document.getElementById('title').value
    mediaRecorder.ondataavailable = function(blob) {
        // var a = document.createElement('a');
        // a.target = '_blank';
        // a.innerHTML = title + ' (Size: ' + bytesToSize(blob.size) + ') Time Length: ' + getTimeLength(timeInterval);

        // a.href = URL.createObjectURL(blob);

        // videosContainer.appendChild(a);

        var newVid = document.createElement('video');
        newVid = mergeProps(newVid, {
          autoplay: true,
          loop: true,
          controls: false,
          width: videoWidth,
          height: videoHeight,
          src: URL.createObjectURL(blob)
        });

        newVid.play();

        // var source = document.createElement('source');
        // source.src = URL.creatseObjectURL(blob);
        videosContainer.appendChild(newVid);
        // newVid.appendChild(source);

        // videosContainer.appendChild(document.createElement('hr'));
    };

    var timeInterval = 3000;
    if(timeInterval) timeInterval = parseInt(timeInterval);
    else timeInterval = 5 * 1000;

    // get blob after specific time interval
    mediaRecorder.start(timeInterval);


    document.querySelector('#stop-recording').disabled = false;

}

function onMediaError(e) {
    console.error('media error', e);
}

var videosContainer = document.getElementById('videos-container');
var index = 1;

// below function via: http://goo.gl/B3ae8c
function bytesToSize(bytes) {
   var k = 1000;
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   if (bytes === 0) return '0 Bytes';
   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)),10);
   return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
}

// below function via: http://goo.gl/6QNDcI
function getTimeLength(milliseconds) {
    var data = new Date(milliseconds);
    return data.getUTCHours()+" hours, "+data.getUTCMinutes()+" minutes and "+data.getUTCSeconds()+" second(s)";
}

window.onbeforeunload = function() {
    document.querySelector('#start-recording').disabled = false;
};

</script>
